From d624add2ab20de7da58923cd9df47166b9b29610 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Thu, 10 Jun 2021 01:29:56 +0300
Subject: [PATCH 2/2] Ask for 1 GB hugetlb page size explicitly

This patch is ugly, but works fine as a proof of concept.

Tested with "-Xmx16G -Xms16G -XX:+AlwaysPreTouch -XX:+UseLargePages -XX:LargePageSizeInBytes=1G"
---
 src/hotspot/os/linux/os_linux.cpp | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/src/hotspot/os/linux/os_linux.cpp b/src/hotspot/os/linux/os_linux.cpp
index 155007724d2..be745293c4c 100644
--- a/src/hotspot/os/linux/os_linux.cpp
+++ b/src/hotspot/os/linux/os_linux.cpp
@@ -3896,7 +3896,18 @@ char* os::Linux::reserve_memory_special_shm(size_t bytes, size_t alignment,
 
   // Create a large shared memory region to attach to based on size.
   // Currently, size is the total size of the heap.
-  int shmid = shmget(IPC_PRIVATE, bytes, SHM_HUGETLB|IPC_CREAT|SHM_R|SHM_W);
+  int flags = SHM_HUGETLB|IPC_CREAT|SHM_R|SHM_W;
+  #define _1G_ALIGN 1073741824
+  if (is_aligned(bytes, _1G_ALIGN)) {
+    #define _MAP_HUGE_MASK 0x3f
+    #define _MAP_HUGE_SHIFT 26
+    int shift = 30;
+    flags |= (shift & _MAP_HUGE_MASK) << _MAP_HUGE_SHIFT;
+    #undef _MAP_HUGE_MASK
+    #undef _MAP_HUGE_SHIFT
+  }
+  #undef _1G_ALIGN
+  int shmid = shmget(IPC_PRIVATE, bytes, flags);
   if (shmid == -1) {
     // Possible reasons for shmget failure:
     // 1. shmmax is too small for Java heap.
-- 
2.30.0

